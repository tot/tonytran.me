---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { IMAGE_SIZES } from "../../constants/image";
import LightboxWrapper from "../gallery/LightboxWrapper";

interface Props {
    src: ImageMetadata;
    alt: string;
    caption?: string;
    size?: keyof typeof IMAGE_SIZES.FIXED;
    class?: string;
}

const { src, alt, caption, size = "MDX_XXS", class: className } = Astro.props;

const imageSizeProps = IMAGE_SIZES.FIXED[size];

// Generate srcSet for lightbox
const srcSet = Object.entries(IMAGE_SIZES.FIXED).map(([, props]) => ({
    src: src.src,
    width: props.width,
    height: Math.round((props.width / src.width) * src.height),
}));

// Sort srcSet by width
srcSet.sort((a, b) => a.width - b.width);

const slide = {
    src: src.src,
    alt,
    width: src.width,
    height: src.height,
    srcSet,
};

const defaultClassNames = "mx-auto shadow-md cursor-pointer";

const classNames = className
    ? `${className} ${defaultClassNames}`
    : defaultClassNames;

const id = src.src.split("/").pop() as string;
---

<figure class="my-8">
    <LightboxWrapper client:load slide={slide} imageId={id}>
        <Image
            {...imageSizeProps}
            src={src}
            alt={alt}
            class={classNames}
            id={id}
        />
    </LightboxWrapper>
    {
        caption && (
            <figcaption class="text-sm text-neutral-500 py-4 mx-auto text-center">
                {caption}
            </figcaption>
        )
    }
</figure>

<script define:vars={{ id }}>
    document.getElementById(id).addEventListener("click", () => {
        document.dispatchEvent(
            new CustomEvent("toggleLightbox", {
                detail: { id },
            }),
        );
    });
</script>
